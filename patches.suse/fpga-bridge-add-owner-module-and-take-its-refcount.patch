From 1da11f822042eb6ef4b6064dc048f157a7852529 Mon Sep 17 00:00:00 2001
From: Marco Pagani <marpagan@redhat.com>
Date: Fri, 22 Mar 2024 18:18:37 +0100
Subject: [PATCH] fpga: bridge: add owner module and take its refcount
Git-commit: 1da11f822042eb6ef4b6064dc048f157a7852529
Patch-mainline: v6.10-rc1
References: CVE-2024-36479 bsc#1226949

[ backport note: majorly rewritten to match with the old code base
  using fpga_bridge_create().  The kABI workaround is also embedded into
  this patch exceptionally for the ease of maintenance -- tiwai ]

The current implementation of the fpga bridge assumes that the low-level
module registers a driver for the parent device and uses its owner pointer
to take the module's refcount. This approach is problematic since it can
lead to a null pointer dereference while attempting to get the bridge if
the parent device does not have a driver.

To address this problem, add a module owner pointer to the fpga_bridge
struct and use it to take the module's refcount. Modify the function for
registering a bridge to take an additional owner module parameter and
rename it to avoid conflicts. Use the old function name for a helper macro
that automatically sets the module that registers the bridge as the owner.
This ensures compatibility with existing low-level control modules and
reduces the chances of registering a bridge without setting the owner.

Also, update the documentation to keep it consistent with the new interface
for registering an fpga bridge.

Other changes: opportunistically move put_device() from __fpga_bridge_get()
to fpga_bridge_get() and of_fpga_bridge_get() to improve code clarity since
the bridge device is taken in these functions.

Fixes: 21aeda950c5f ("fpga: add fpga bridge framework")
Suggested-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
Suggested-by: Xu Yilun <yilun.xu@intel.com>
Reviewed-by: Russ Weight <russ.weight@linux.dev>
Signed-off-by: Marco Pagani <marpagan@redhat.com>
Acked-by: Xu Yilun <yilun.xu@intel.com>
Link: https://lore.kernel.org/r/20240322171839.233864-1-marpagan@redhat.com
Signed-off-by: Xu Yilun <yilun.xu@linux.intel.com>
Acked-by: Takashi Iwai <tiwai@suse.de>

---
 drivers/fpga/fpga-bridge.c       |   66 ++++++++++++++++++++++++---------------
 include/linux/fpga/fpga-bridge.h |   12 +++++--
 2 files changed, 50 insertions(+), 28 deletions(-)

--- a/drivers/fpga/fpga-bridge.c
+++ b/drivers/fpga/fpga-bridge.c
@@ -71,33 +71,26 @@ int fpga_bridge_disable(struct fpga_brid
 }
 EXPORT_SYMBOL_GPL(fpga_bridge_disable);
 
-static struct fpga_bridge *__fpga_bridge_get(struct device *dev,
+static struct fpga_bridge *__fpga_bridge_get(struct device *bridge_dev,
 					     struct fpga_image_info *info)
 {
 	struct fpga_bridge *bridge;
-	int ret = -ENODEV;
 
-	bridge = to_fpga_bridge(dev);
+	bridge = to_fpga_bridge(bridge_dev);
 
 	bridge->info = info;
 
-	if (!mutex_trylock(&bridge->mutex)) {
-		ret = -EBUSY;
-		goto err_dev;
-	}
+	if (!mutex_trylock(&bridge->mutex))
+		return ERR_PTR(-EBUSY);
 
-	if (!try_module_get(dev->parent->driver->owner))
-		goto err_ll_mod;
+	if (!try_module_get(bridge->br_ops_owner)) {
+		mutex_unlock(&bridge->mutex);
+		return ERR_PTR(-ENODEV);
+	}
 
 	dev_dbg(&bridge->dev, "get\n");
 
 	return bridge;
-
-err_ll_mod:
-	mutex_unlock(&bridge->mutex);
-err_dev:
-	put_device(dev);
-	return ERR_PTR(ret);
 }
 
 /**
@@ -113,14 +106,19 @@ err_dev:
 struct fpga_bridge *of_fpga_bridge_get(struct device_node *np,
 				       struct fpga_image_info *info)
 {
-	struct device *dev;
+	struct fpga_bridge *bridge;
+	struct device *bridge_dev;
 
-	dev = class_find_device(fpga_bridge_class, NULL, np,
-				fpga_bridge_of_node_match);
-	if (!dev)
+	bridge_dev = class_find_device(fpga_bridge_class, NULL, np,
+				       fpga_bridge_of_node_match);
+	if (!bridge_dev)
 		return ERR_PTR(-ENODEV);
 
-	return __fpga_bridge_get(dev, info);
+	bridge = __fpga_bridge_get(bridge_dev, info);
+	if (IS_ERR(bridge))
+		put_device(bridge_dev);
+
+	return bridge;
 }
 EXPORT_SYMBOL_GPL(of_fpga_bridge_get);
 
@@ -140,6 +138,7 @@ static int fpga_bridge_dev_match(struct
 struct fpga_bridge *fpga_bridge_get(struct device *dev,
 				    struct fpga_image_info *info)
 {
+	struct fpga_bridge *bridge;
 	struct device *bridge_dev;
 
 	bridge_dev = class_find_device(fpga_bridge_class, NULL, dev,
@@ -147,7 +146,11 @@ struct fpga_bridge *fpga_bridge_get(stru
 	if (!bridge_dev)
 		return ERR_PTR(-ENODEV);
 
-	return __fpga_bridge_get(bridge_dev, info);
+	bridge = __fpga_bridge_get(bridge_dev, info);
+	if (IS_ERR(bridge))
+		put_device(bridge_dev);
+
+	return bridge;
 }
 EXPORT_SYMBOL_GPL(fpga_bridge_get);
 
@@ -161,7 +164,7 @@ void fpga_bridge_put(struct fpga_bridge
 	dev_dbg(&bridge->dev, "put\n");
 
 	bridge->info = NULL;
-	module_put(bridge->dev.parent->driver->owner);
+	module_put(bridge->br_ops_owner);
 	mutex_unlock(&bridge->mutex);
 	put_device(&bridge->dev);
 }
@@ -333,12 +336,14 @@ ATTRIBUTE_GROUPS(fpga_bridge);
  * @name:	FPGA bridge name
  * @br_ops:	pointer to structure of fpga bridge ops
  * @priv:	FPGA bridge private data
+ * @owner:	owner module containing the br_ops
  *
  * Return: struct fpga_bridge or NULL
  */
-struct fpga_bridge *fpga_bridge_create(struct device *dev, const char *name,
-				       const struct fpga_bridge_ops *br_ops,
-				       void *priv)
+struct fpga_bridge *
+__fpga_bridge_create(struct device *dev, const char *name,
+		     const struct fpga_bridge_ops *br_ops,
+		     void *priv, struct module *owner)
 {
 	struct fpga_bridge *bridge;
 	int id, ret = 0;
@@ -363,6 +368,7 @@ struct fpga_bridge *fpga_bridge_create(s
 
 	bridge->name = name;
 	bridge->br_ops = br_ops;
+	bridge->br_ops_owner = owner;
 	bridge->priv = priv;
 
 	device_initialize(&bridge->dev);
@@ -385,6 +391,16 @@ error_kfree:
 
 	return NULL;
 }
+EXPORT_SYMBOL_GPL(__fpga_bridge_create);
+
+/* FIXME: provided only for kABI compatibility */
+#undef fpga_bridge_create
+struct fpga_bridge *
+fpga_bridge_create(struct device *dev, const char *name,
+		   const struct fpga_bridge_ops *br_ops, void *priv)
+{
+	return __fpga_bridge_create(dev, name, br_ops, priv, dev->parent->driver->owner);
+}
 EXPORT_SYMBOL_GPL(fpga_bridge_create);
 
 /**
--- a/include/linux/fpga/fpga-bridge.h
+++ b/include/linux/fpga/fpga-bridge.h
@@ -26,6 +26,7 @@ struct fpga_bridge_ops {
  * @dev: FPGA bridge device
  * @mutex: enforces exclusive reference to bridge
  * @br_ops: pointer to struct of FPGA bridge ops
+ * @br_ops_owner: module containing the br_ops
  * @info: fpga image specific information
  * @node: FPGA bridge list node
  * @priv: low level driver private date
@@ -38,6 +39,9 @@ struct fpga_bridge {
 	struct fpga_image_info *info;
 	struct list_head node;
 	void *priv;
+#ifndef __GENKSYMS__
+	struct module *br_ops_owner;
+#endif
 };
 
 #define to_fpga_bridge(d) container_of(d, struct fpga_bridge, dev)
@@ -60,9 +64,11 @@ int of_fpga_bridge_get_to_list(struct de
 			       struct fpga_image_info *info,
 			       struct list_head *bridge_list);
 
-struct fpga_bridge *fpga_bridge_create(struct device *dev, const char *name,
-				       const struct fpga_bridge_ops *br_ops,
-				       void *priv);
+struct fpga_bridge *__fpga_bridge_create(struct device *dev, const char *name,
+					 const struct fpga_bridge_ops *br_ops,
+					 void *priv, struct module *owner);
+#define fpga_bridge_create(dev, name, br_ops, priv) \
+	__fpga_bridge_create(dev, name, br_ops, priv, THIS_MODULE)
 void fpga_bridge_free(struct fpga_bridge *br);
 int fpga_bridge_register(struct fpga_bridge *br);
 void fpga_bridge_unregister(struct fpga_bridge *br);
